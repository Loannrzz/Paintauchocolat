name: CI

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'
env:
  EXECUTABLES: "mysh"
  MIRROR_URL: git@github.com:EpitechPromo2028/B-DOP-200-MPL-2-1-chocolatine-loann.picard-blardone.git
  workflow_dispatch:
jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    if: github.repository == 'Loannrzz/Paintauchocolat'
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate .log file
        run: check.sh $(pwd) $(pwd)
      - name: Check for coding style errors in .log file
        run: |
          if [ -s coding-style-reports.log ]; then
            while IFS= read -r line
            do
              if [[ $line != *"illegal token"* ]]; then
                FILE=$(echo $line | cut -d':' -f1)
                LINE=$(echo $line | cut -d':' -f2)
                MSG=$(echo $line | cut -d':' -f3-)
                echo "::error file=$FILE,line=$LINE::$MSG"
              fi
            done < coding-style-reports.log
            if grep -qv 'illegal token' coding-style-reports.log; then
              exit 1
            fi
          fi
  check_program_compilation:
    runs-on: ubuntu-latest
    needs: [ check_coding_style ]
    if: ${{ needs.check_coding_style.result == 'success' }}
    container:
      image: epitechcontent/epitest-docker
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@main
      - name: Run make
        run: make
        timeout-minutes: 2
      - name: Run Clean
        run: make clean
      - name: Verify executables
        run: |
          for file in $EXECUTABLES; do
            if [ ! -x "$file" ]; then
              echo "Error: $file is either missing or not executable."
              exit 1
            fi
              exit 0
          done
  run_tests:
    runs-on: ubuntu-latest
    needs: [ check_program_compilation ]
    if: ${{ needs.check_program_compilation.result == 'success' }}
    container:
      image: epitechcontent/epitest-docker
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@main
      - name: run_tests
        run: make tests_run
        timeout-minutes: 2
  push_to_mirror:
    runs-on: ubuntu-latest
    needs: [ run_tests ]
    if: ${{ needs.run_tests.result == 'success' }}
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@main
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
